name: Django CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    # Step 4: Install dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 5: Run linters
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --exclude=migrations
        continue-on-error: true

    # Step 6: Run Django tests
    - name: Run Tests
      run: |
        python manage.py test

    # Step 7: Collect artifacts (e.g., coverage reports)
    - name: Generate Coverage Report
      run: |
        pip install coverage
        coverage run manage.py test
        coverage report
        coverage xml
      continue-on-error: true  # Don't fail if coverage isn't configured
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml

  containerize-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test  # Only run if build-and-test succeeds

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/django-app:latest .

    # Step 4: Push the Docker image to DockerHub
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/django-app:latest

    # Step 5: Upload Docker Image Digest (Artifact)
    - name: Save Docker Image Digest
      run: |
        docker inspect ${{ secrets.DOCKER_USERNAME }}/django-app:latest --format='{{index .RepoDigests 0}}' > image-digest.txt
      continue-on-error: true
    - name: Upload Docker Image Digest
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-digest
        path: image-digest.txt
